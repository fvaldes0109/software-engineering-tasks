openapi: 3.0.3
info:
  title: Harbour.Eats
  description: |-
    This is the desing of schemas and endpoints for the Quests feature of Harbour.Eats.

    For more information about the product, you can go to:
    - [Product Requirements Document](https://docs.google.com/document/d/1AB9UwRf13sW7MMsvsw2U5ksHV0o7L_FzOdYn9URKG2g/edit?usp=sharing)
    - [Request For Comments Document](https://docs.google.com/document/d/1jdzAkRxnnGrEXd5ZXXd_1BhJMyVb0GiANlKKM6dO8MQ/edit?usp=sharing)
  version: 0.0.1
tags:
  - name: order
    description: Everything about your Orders
  - name: quest
    description: Everything about your Quests
  - name: courier
    description: Operations about your Couriers
paths:
  /order:
    get:
      tags:
        - order
      summary: Get a list of orders
      description: Returns a list of orders
      operationId: getOrders
      parameters:
        - name: status
          in: query
          description: 'Filter orders by completion status'
          required: false
          schema:
            type: string
            example: "inProgress"
            enum: [
              "completed",
              "cancelled",
              "inProgress",
              "unassigned"
            ]
        - name: username
          in: query
          description: 'Filter orders by assigned courier'
          required: false
          schema:
            type: string
        - name: questId
          in: query
          description: "Filter orders by the quest they've been part of"
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    patch:
      tags:
        - order
      summary: Update an order's status
      description: Update an order's status
      operationId: updateOrderStatus
      requestBody:
        description: Update an existent order's status
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                  format: int64
                  example: 10
                status:
                  type: string
                  example: "inProgress"
                  enum: [
                    "completed",
                    "cancelled",
                    "inProgress",
                    "unassigned"
                  ]
          application/xml:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                  format: int64
                  example: 10
                status:
                  type: string
                  example: "inProgress"
                  enum: [
                    "completed",
                    "cancelled",
                    "inProgress",
                    "unassigned"
                  ]
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                  format: int64
                  example: 10
                status:
                  type: string
                  example: "inProgress"
                  enum: [
                    "completed",
                    "cancelled",
                    "inProgress",
                    "unassigned"
                  ]
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        '422':
          description: Validation exception
  /order/{orderId}:
    get:
      tags:
        - order
      summary: Find order by ID
      description: Returns a single order
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /quest:
    put:
      tags:
        - quest
      summary: Update an existing quest
      description: Update an existing quest by Id
      operationId: updateQuest
      requestBody:
        description: Update an existent quest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Quest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Quest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quest'
            application/xml:
              schema:
                $ref: '#/components/schemas/Quest'
        '400':
          description: Invalid ID supplied
        '404':
          description: Quest not found
        '422':
          description: Validation exception
    post:
      tags:
        - quest
      summary: Add a new quest
      description: Add a new quest
      operationId: addQuest
      requestBody:
        description: Create a new quest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Quest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Quest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quest'
            application/xml:
              schema:
                $ref: '#/components/schemas/Quest'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /quest/{questId}:
    get:
      tags:
        - quest
      summary: Find quest by ID
      description: Returns a single quest
      operationId: getQuestById
      parameters:
        - name: questId
          in: path
          description: ID of quest to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quest'
            application/xml:
              schema:
                $ref: '#/components/schemas/Quest'
        '400':
          description: Invalid ID supplied
        '404':
          description: Quest not found
    delete:
      tags:
        - quest
      summary: Deletes a quest
      description: Delete a quest
      operationId: deleteQuest
      parameters:
        - name: questId
          in: path
          description: Quest id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Quest not found
  /courier/{username}/history:
    get:
      tags:
        - courier
      summary: Get courier's history of past quests
      description: ''
      operationId: getCourierQuestHistory
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestCourier'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestCourier'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /courier/{username}/active_quest:
    get:
      tags:
        - courier
      summary: Get courier's current active quest
      description: ''
      operationId: getCourierCurrentQuest
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestCourier'
            application/xml:
              schema:
                $ref: '#/components/schemas/QuestCourier'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Quest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        timeToCompleteInSeconds:
          type: integer
          format: int32
          example: 604800
        rewardsByCompletedOrders:
          type: object
          additionalProperties:
            type: integer
          example: {5: 10, 10: 20, 50: 30}
      xml:
        name: quest
    QuestCourier:
      type: object
      properties:
        questId:
          type: integer
          format: int64
          example: 13
        username:
          type: string
          example: "user1"
        status:
          type: string
          example: "inProgress"
          enum: [
            "completed",
            "cancelled",
            "inProgress"
          ]
        ordersDelivered:
          type: integer
          format: int32
          example: 10
      xml:
        name: questCourier
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        foodPickupAddress:
          type: string
          description: "Where to collect the food"
          example: "Freddy Fazbear Pizza, Colon Ave. 123"
        deliverAddress:
          type: string
          description: "Where to deliver the food"
          example: "Penny Lane 333"
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          example: "inProgress"
          enum: [
            "completed",
            "cancelled",
            "inProgress",
            "unassigned"
          ]
      xml:
        name: order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        role:
          type: string
          enum:
            - courier
            - admin
            - customer
      xml:
        name: user
